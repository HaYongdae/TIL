# R session은 사용자가 R 프로그램을 시작한 후 R콘솔 시작
sessionInfo()
# 설치된 R 패키지의 목록 확인
installed.packages()
install.packages("stringr")
library(stringr)
search(stringr)
search()
#빈도수 히스토그램
hist(Nile)
#밀도 기준 히스토그램
hist(Nile, freq=F)
#분포곡선 추가하기
lines(density(Nile)
#Plots영역에 표시할 그래프 개수 설정
par(mfrow=c(1,1))
#분포곡선 추가하기
lines(density(Nile)
#분포곡선 추가하기
lines(density(Nile))
#밀도 기준 히스토그램
hist(Nile, freq=F)
#분포곡선 추가하기
lines(density(Nile))
#Plots영역에 표시할 그래프 개수 설정
par(mfrow=c(1,1))
#파일 출력 경로
pdf("c:/workspceR/sample.pdf")
#정규분포를 따르는 난수 20개 생성해서 히스토그램 생성
hist(rnorm(20))
#출력 파일 닫기
dev.off()
source('C:/Users/student/Desktop/git_repository/R/src/var_R.R', encoding = 'UTF-8', echo=TRUE)
x <- 3
tracemem(x)
x <-'a'
tracemem(x)
age <- 30
class(age)
age <-"29"
class(age)
age <-TRUE
class(age)
age <- F
class(age)
age <- NA
class(age+10)
age <- null
class(age+10)
age <- null
class(age+10)
age <- Null
age <- NULL
age <- NULL
class(age+10)
class(age)
age <- NULL
class(age)
class(age)
class(age)
class(age)
age <- NULL
class(age)
age <- NA
class(age)
age <- NULL
class(age)
x <- c("1","2","3")
result <- x*3
result <- as.numeric(x)*3
result
result <- as.integer(x)*3
result
print(result)
mode(x)
class(x)
x <- list(1,2,3)
class(x)
mode(x)
y <- c(1,2,3,4,5,6)
array(y, dim = c(2,2,3))
#현재 workspace 확인
getwd()
1+2 ; 3+4
ex_list <- list(c(1,2,3), "hello")
ex_list
c(TRUE,TRUE) & C(TRUE, FALSE)
c(TRUE,TRUE) & c(TRUE, FALSE)
c(TRUE,TRUE) && c(TRUE, FALSE)
as.Date("2017-07-04 20:00:00 ")-as.Date("2017-07-04 18:30")
as.POSIXct("2017-07-04 20:00:00 ")-as.POSIXct("2017-07-04 18:30")
as.POSIXt("2017-07-04 20:00:00 ")-as.POSIXt("2017-07-04 18:30")
example(Date)
960", "31mar1960", "30jul1960")
z <- as.Date(x, "%d%b%Y")
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- as.Date(x, "%d%b%Y")
z
Sys.setlocale(category = "LC_ALL", locale = "korea")
Sys.setlocale(category = "LC_ALL", locale = "ko")
Sys.setlocale(category = "LC_ALL", locale = "ROK")
Sys.setlocale(category = "LC_ALL", locale = "Republic of Korea")
Sys.setlocale(category = "LC_ALL", locale = "")
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- as.Date(x, "%d%b%Y")
z
lct <- Sys.getlocale("LC_TIME"); Sys.setlocale("LC_TIME", "C")
x <- c("1jan1960", "2jan1960", "31mar1960", "30jul1960")
z <- as.Date(x, "%d%b%Y")
z
sys.Date
sys.Date()
sys.Date()
Sys.Date()
Sys.time()
ID <- c(1,2,3,4,5,6,7,8,9,10)
SEX <- c("F","M","F","M","F","M","F","M","F","M")
AGE <- c(50,40,28,50,27,23,56,47,20,38)
AREA <- c("서울","경기","제주","서울","서울","서울","서울","경기","서울","인천","서울")
dataframe_ex <- data.frame(ID,SEX,AGE,AREA)
dataframe_ex <- data.frame(ID,SEX,AGE,AREA)
AREA <- c("서울","경기","제주","서울","서울","서울","서울","경기","서울","인천")
dataframe_ex <- data.frame(ID,SEX,AGE,AREA)
dataframe_ex
gender <- c("man","woman", "woman", "man", "man")
plot(gender)  #차트는 수치 데이터만 가능하므로 오류
gender <- c("man","woman", "woman", "man", "man")
plot(gender)  #차트는 수치 데이터만 가능하므로 오류
class(gender)
mode(gender)
plot(gender)  #차트는 수치 데이터만 가능하므로 오류
ngender <- as.factor(gender) #범주의 순서가 알파벳 순서로 정렬됨
class(ngender)
mode(ngender)
table(ngender) #빈도수 반환
plot(ngender)
is.factor(ngender)
str(ngender)
print(ngender)
ngender
args(factor)
args(factor)
ogender <- factor(gender, levels<=("woman","man"), ordered=T)
ogender <- factor(gender, levels<=("woman","man"), ordered=T)
ogender <- factor(gender, levels<-("woman","man"), ordered=T)
ogender <- factor(gender, levels<-c("woman","man"), ordered=T)
ogender
par(mfrow=c(1,2))
plot(ngender)
plot(ogender)
# 범주의 순서 확인 가능 옵션 , levels 지정 후, ordered
ogender <- factor(gender, ordered=T)
ogender
plot(ogender)
plot(ogender)
plot(ngender)
plot(ogender)
plot(ngender)
plot(ngender)
plot(ogender)
plot(ogender)
# 범주의 순서 확인 가능 옵션 , levels 지정 후, ordered
ogender <- factor(gender, levels<-c("woman","man") ,  ordered=T)
plot(ogender)
plot(ogender)
# 아래 코드로 비교 실습
table(ngender)
table(ogender)
a.intersect(b)
a <- (1,2,3)
b <- (2,3,4)
a <- c(1,2,3)
b <- c(2,3,4)
a.intersect(b)
intersect(a,b)
vector_int <- c(-1,0,"4",5:9)
mode(vector_int)
class(vector_int)
a<- c(1,2,3)
b<- c(2,3,4,5)
union(a, d)
union(a,d)
union(a,b)
setdiff(a, b)
intersect(a, b)
a[1:2]
a[c(1)]
a[-c(2)]
a<- c(1:20)
union(a,b)
setdiff(a, b)
intersect(a, b)
a[1:2]
a[c(1)]
a[-c(2:18)]
