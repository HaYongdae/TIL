# 단계2 : 정상성시계열 변환
par(mfrow=c(1,2))
ts.plot(tsdata)
diff <- diff(tsdata)
plot(diff) # 차분 시각화
# 단계3 : 모형 식별과 추정
library(forecast)
ts_model2 <- auto.arima(tsdata)
ts_model2
# 단계4 : 모형 생성
model <- arima(tsdata, c(2, 1, 0),
seasonal = list(order = c(1, 0, 0)))
model
ts_model3 <- auto.arima(diff)
ts_model2 <- auto.arima(tsdata)
ts_model2
######계절성 있는 데이터의 정상성시계열의 ARIMA 모델 분석########
data <- c(45, 56, 45, 43, 69, 75, 58, 59, 66, 64, 62, 65,
55, 49, 67, 55, 71, 78, 71, 65, 69, 43, 70, 75,
56, 56, 65, 55, 82, 85, 75, 77, 77, 69, 79, 89)
# 시계열자료 생성
tsdata <- ts(data, start=c(2016, 1), end = c(2018, 10),frequency=12)
tsdata
head(tsdata)
tail(tsdata)
#시계열요소분해 시각화
ts_feature <- stl(tsdata, s.window="periodic")
plot(ts_feature)
# 단계2 : 정상성시계열 변환
par(mfrow=c(1,2))
ts.plot(tsdata)
diff <- diff(tsdata)
plot(diff) # 차분 시각화
ts_model2 <- auto.arima(tsdata)
ts_model2 <- auto.arima(tsdata)
diff <- diff(tsdata)
plot(diff) # 차분 시각화
ts_model2 <- auto.arima(tsdata)
ts_model2
ts_model2 <- auto.arima(diff)
ts_model2
# 단계4 : 모형 생성
model <- arima(tsdata, c(2, 1, 0),
seasonal = list(order = c(1, 0, 0)))
model
# 단계5 : 모형 진단(모형 타당성 검정)
# (1) 자기상관함수에 의한 모형 진단
tsdiag(model)
# (2)Box-Ljung에 의한 잔차항 모형 진단
Box.test(model$residuals, lag=1, type = "Ljung")  #0.593
ts.plot(tsdata)
diff <- diff(tsdata)
plot(diff) # 차분 시각화
#시계열요소분해 시각화
ts_feature <- stl(tsdata, s.window="periodic")
plot(ts_feature)
##########시계열 분석 연습문제 1 #####################
#시계열 자료를 대상으로 다음 단계별로 시계열 모형을 생성하고, 미래를 예측하시오.
#<데이터 셋 준비>
data(EuStockMarkets)
head(EuStockMarkets)
EuStock<- data.frame(EuStockMarkets)
head(EuStock)
Second <- c(1:500) # 초단 단위로 벡터 생성
DAX <- EuStock$DAX[1001:1500] # DAX 칼럼으로 백터 생성
EuStock.df <- data.frame(Second, DAX) # 데이터프레임 생성
Eustock.df
Eustock.df
EuStock.df <- data.frame(Second, DAX) # 데이터프레임 생성
Eustock.df
EuStock.df
tsdata <- ts(data, start = c(2001, 01),frequency=12)
head(tsdata)
tsdata <- ts(EuStock.df, start = c(2001, 01),frequency=12)
head(tsdata)
tsdata <- ts(EuStock.df$DAX, start = c(2001, 01),frequency=12)
head(tsdata)
stl_graph <- stl(tsdata)
plot(stl(tsdata, "periodic")
plot(stl(tsdata, "periodic"))
plot(stl(tsdata, "periodic"))
(2) decompose() 함수 이용 분해 시각화, 불규칙요인만 시각화
m<- decompose(tsdata)
attributes(m)
plot(m)       #추세, 계정, 불규칙 요인 포함 시각화
plot(tsdata - m$seasonal)  #계절 요인을 제거한 시각화
plot(tsdata - m$trend)    #계절 요인을 제거한 시각화
plot(tsdata - m$seasonal - m$trend)  #불규칙 요인만 시각화
(2) decompose() 함수 이용 분해 시각화, 불규칙요인만 시각화
par(c(2,2))
(2) decompose() 함수 이용 분해 시각화, 불규칙요인만 시각화
par <- (c(2,2))
m<- decompose(tsdata)
attributes(m)
plot(m)       #추세, 계정, 불규칙 요인 포함 시각화
plot(tsdata - m$seasonal)  #계절 요인을 제거한 시각화
plot(tsdata - m$trend)    #계절 요인을 제거한 시각화
plot(tsdata - m$seasonal - m$trend)  #불규칙 요인만 시각화
(2) decompose() 함수 이용 분해 시각화, 불규칙요인만 시각화
par(mfrow = c(2,2))
m<- decompose(tsdata)
attributes(m)
plot(m)       #추세, 계정, 불규칙 요인 포함 시각화
plot(tsdata - m$seasonal)  #계절 요인을 제거한 시각화
plot(tsdata - m$trend)    #계절 요인을 제거한 시각화
plot(tsdata - m$seasonal - m$trend)  #불규칙 요인만 시각화
(3) 계절요인추세요인 제거 그래프-불규칙요인만 출력
단계3 : ARIMA 시계열 모형 생성
ts_model2 <- auto.arima(tsdata)
ts_model2
model <- arima(tsdata, c(2, 1, 2),
seasonal = list(order = c(1, 0, 2)))
model
tsdiag(model)
Box.test(model$residuals, lag=1, type = "Ljung")
fore <- forecast(model, h=36) # 2년 예측
plot(fore)
goods <- read.csv("C:/Users/student/Desktop/datafile-II/data-4/Sales.csv", header = TRUE)
goods <- read.csv("C://Users/student/Desktop/datafile-II/data-4/Sales.csv", header = TRUE)
goods <- read.csv("C:Users/student/Desktop/datafile-II/data-4/Sales.csv", header = TRUE)
getdir()
getwd()
goods <- read.csv("C:/Users/student/Desktop/datafile-II/data-4/data-4/Sales.csv", header = TRUE)
str(goods)
tsdata <- ts(goods$Goods, start = c(2015,01), frequency = 12)
head(tsdata)
단계2 : 시계열모형 추정과 모형 생성
ts_model2 <- auto.arima(tsdata)
ts_model2
model <- arima(tsdata, c(0, 1, 0),
seasonal = list(order = c(1, 1, 0)))
model
tsdiag(model)
Box.test(model$residuals, lag=1, type = "Ljung")
par(mfrow=c(1,1))
fore <- forecast(model, h=7) # 2년 예측
plot(fore)
library(shiny)
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny) #shiny패키지 메모리 로딩
# Define UI for application that draws a histogram
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId="xAxis","Choose X axis:",choices = c("mpg","disp","hp","drat","wt")
),
selectInput(inputId="yAxis","Choose Y axis:",choices = c("wt","drat","hp","disp","mpg")
)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId="mtcarsPlot")
)
)
)
# Run the application
shinyApp(ui = ui, server = server)
server <- function(input, output) {
output$mtcarsPlot <- renderPlot({
plot(mtcars[, c(input$xAxis, input$yAxis)])
})
}
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId="xAxis","Choose X axis:",choices = c("mpg","disp","hp","drat","wt")
),
selectInput(inputId="yAxis","Choose Y axis:",choices = c("wt","drat","hp","disp","mpg")
),
sliderInput(inputId ="cex", "point size", min = 0.1, max = 3, value = 1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId="mtcarsPlot")
)
)
)
plot(mtcars[, c(input$xAxis, input$yAxis)],
main = title,
pch = as.number(input$pch),
cex = input$cex)
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny) #shiny패키지 메모리 로딩
# Define UI for application that draws a histogram
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId="xAxis","Choose X axis:",choices = c("mpg","disp","hp","drat","wt")
),
selectInput(inputId="yAxis","Choose Y axis:",choices = c("wt","drat","hp","disp","mpg")
),
sliderInput(inputId ="cex", "point size", min = 0.1, max = 3, value = 1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId="mtcarsPlot")
)
)
)
# Run the application
server <- function(input, output) {
output$mtcarsPlot <- renderPlot({
title <- paste(input$xAxis, "vs",input$yAxis)
plot(mtcars[, c(input$xAxis, input$yAxis)],
main = title,
pch = as.number(input$pch),
cex = input$cex)
})
}
shinyApp(ui = ui, server = server)
plot(mtcars[, c(input$xAxis, input$yAxis)],
main = title,
pch = as.numeric(input$pch),
cex = input$cex)
shinyApp(ui = ui, server = server)
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny) #shiny패키지 메모리 로딩
# Define UI for application that draws a histogram
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId="xAxis","Choose X axis:",choices = c("mpg","disp","hp","drat","wt")
),
selectInput(inputId="yAxis","Choose Y axis:",choices = c("wt","drat","hp","disp","mpg")
),
sliderInput(inputId ="cex", "point size", min = 0.1, max = 3, value = 1)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId="mtcarsPlot")
)
)
)
# Run the application
server <- function(input, output) {
output$mtcarsPlot <- renderPlot({
title <- paste(input$xAxis, "vs",input$yAxis)
plot(mtcars[, c(input$xAxis, input$yAxis)],
main = title,
pch = as.numeric(input$pch),
cex = input$cex)
})
}
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId="xAxis","Choose X axis:",choices = c("mpg","disp","hp","drat","wt")
),
selectInput(inputId="yAxis","Choose Y axis:",choices = c("wt","drat","hp","disp","mpg")
),
selectInput(inputId = "pch", "choose shape:" , choices = c("circle"=1, "circle2"=16,"circle"=22)),
sliderInput(inputId ="cex", "point size", min = 0.1, max = 3, value = 1
)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId="mtcarsPlot")
)
)
)
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny) #shiny패키지 메모리 로딩
# Define UI for application that draws a histogram
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId="xAxis","Choose X axis:",choices = c("mpg","disp","hp","drat","wt")
),
selectInput(inputId="yAxis","Choose Y axis:",choices = c("wt","drat","hp","disp","mpg")
),
selectInput(inputId = "pch", "choose shape:" , choices = c("circle"=1, "circle2"=16,"circle"=22)),
sliderInput(inputId ="cex", "point size", min = 0.1, max = 3, value = 1
)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId="mtcarsPlot")
)
)
)
# Run the application
server <- function(input, output) {
output$mtcarsPlot <- renderPlot({
title <- paste(input$xAxis, "vs",input$yAxis)
plot(mtcars[, c(input$xAxis, input$yAxis)],
main = title,
pch = as.numeric(input$pch),
cex = input$cex)
})
}
shinyApp(ui = ui, server = server)
# Define UI for application that draws a histogram
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId="xAxis","Choose X axis:",choices = c("mpg","disp","hp","drat","wt")
),
selectInput(inputId="yAxis","Choose Y axis:",choices = c("wt","drat","hp","disp","mpg")
),
selectInput(inputId = "pch", "choose shape:" , choices = c("circle"=1, "circle2"=16,"circle3"=22)),
sliderInput(inputId ="cex", "point size", min = 0.1, max = 3, value = 1
)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId="mtcarsPlot")
)
)
)
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny) #shiny패키지 메모리 로딩
# Define UI for application that draws a histogram
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId="xAxis","Choose X axis:",choices = c("mpg","disp","hp","drat","wt")
),
selectInput(inputId="yAxis","Choose Y axis:",choices = c("wt","drat","hp","disp","mpg")
),
selectInput(inputId = "pch", "choose shape:" , choices = c("circle"=1, "circle2"=16,"circle3"=22)),
sliderInput(inputId ="cex", "point size", min = 0.1, max = 3, value = 1
)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId="mtcarsPlot")
)
)
)
# Run the application
server <- function(input, output) {
output$mtcarsPlot <- renderPlot({
title <- paste(input$xAxis, "vs",input$yAxis)
plot(mtcars[, c(input$xAxis, input$yAxis)],
main = title,
pch = as.numeric(input$pch),
cex = input$cex)
})
}
shinyApp(ui = ui, server = server)
install.packages('rsconnect')
install.packages("rsconnect")
rsconnect::setAccountInfo(name='sikgu',
token='C5F685F1E01DEAE465210F1984B64C79',
secret='<SECRET>')
rsconnect::setAccountInfo(name='sikgu',
token='C5F685F1E01DEAE465210F1984B64C79',
secret='/O3nMv8FwkiK+JZezRNW8rsAUiNtEX6QEqFXYyjZ')
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny) #shiny패키지 메모리 로딩
# Define UI for application that draws a histogram
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId="xAxis","Choose X axis:",choices = c("mpg","disp","hp","drat","wt")
),
selectInput(inputId="yAxis","Choose Y axis:",choices = c("wt","drat","hp","disp","mpg")
),
selectInput(inputId = "pch", "choose shape:" , choices = c("circle"=1, "circle2"=16,"circle3"=22)),
sliderInput(inputId ="cex", "point size", min = 0.1, max = 3, value = 1
)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId="mtcarsPlot")
)
)
)
# Run the application
server <- function(input, output) {
output$mtcarsPlot <- renderPlot({
title <- paste(input$xAxis, "vs",input$yAxis)
plot(mtcars[, c(input$xAxis, input$yAxis)],
main = title,
pch = as.numeric(input$pch),
cex = input$cex)
})
}
shinyApp(ui = ui, server = server)
setwd(C:/Users/student/Desktop/git_repository/R/src/)
getwd()
setwd(C:/Users/student/Desktop/git_repository/R/src/)
setwd(C://Users/student/Desktop/git_repository/R/src/)
setwd("C:/Users/student/Desktop/git_repository/R/src/")
getwd()
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
setwd("C:/Users/student/Desktop/git_repository/R/src/")
getwd()
library(shiny) #shiny패키지 메모리 로딩
# Define UI for application that draws a histogram
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId="xAxis","Choose X axis:",choices = c("mpg","disp","hp","drat","wt")
),
selectInput(inputId="yAxis","Choose Y axis:",choices = c("wt","drat","hp","disp","mpg")
),
selectInput(inputId = "pch", "choose shape:" , choices = c("circle"=1, "circle2"=16,"circle3"=22)),
sliderInput(inputId ="cex", "point size", min = 0.1, max = 3, value = 1
)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId="mtcarsPlot")
)
)
)
# Run the application
server <- function(input, output) {
output$mtcarsPlot <- renderPlot({
title <- paste(input$xAxis, "vs",input$yAxis)
plot(mtcars[, c(input$xAxis, input$yAxis)],
main = title,
pch = as.numeric(input$pch),
cex = input$cex)
})
}
shinyApp(ui = ui, server = server)
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny) #shiny패키지 메모리 로딩
# Define UI for application that draws a histogram
ui <- fluidPage(
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
selectInput(inputId="xAxis","Choose X axis:",choices = c("mpg","disp","hp","drat","wt")
),
selectInput(inputId="yAxis","Choose Y axis:",choices = c("wt","drat","hp","disp","mpg")
),
selectInput(inputId = "pch", "choose shape:" , choices = c("circle"=1, "circle2"=16,"circle3"=22)),
sliderInput(inputId ="cex", "point size", min = 0.1, max = 3, value = 1
)
),
# Show a plot of the generated distribution
mainPanel(
plotOutput(outputId="mtcarsPlot")
)
)
)
# Run the application
server <- function(input, output) {
output$mtcarsPlot <- renderPlot({
title <- paste(input$xAxis, "vs",input$yAxis)
plot(mtcars[, c(input$xAxis, input$yAxis)],
main = title,
pch = as.numeric(input$pch),
cex = input$cex)
})
}
shinyApp(ui = ui, server = server)
