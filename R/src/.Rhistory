a<- c(1:20)
b<- c(2,3,4,5)
identical(a, b) # 두 객체의 데이터 개수, 순서도 일치
setequal(a, b)
e<- c(20:1)
d<- c(1:20)
setequal(a, d)
setequal(a, e)
identical(a, e) # 두 객체의 데이터 개수, 순서가 일치하는가
identical(a, d) # 두 객체의 데이터 개수, 순서가 일치하는가
f<- c(2:21)
identical(a, f) # 두 객체의 데이터 개수, 순서가 일치하는가
setequal(a, f)  # 두 객체의 데이터가 일치하는가
identical(a, e) # 두 객체의 데이터 개수, 순서가 일치하는가
setequal(a, e)  # 두 객체의 데이터가 일치하는가
x <- c(1,2,3,4,5,6)
matrix(x, nrow=2, ncol=3)
matrix(x, nrow=3, ncol=2, byrow=T)
matrix(x, nrow=3, ncol=2)             # 위에서 아래로 채워감
matrix(x, nrow=3, ncol=2, byrow=T, dimnames(c("첫째","둘째")))
zz = matrix(x, nrow=3, ncol=2, byrow=T, dimnames(c("첫째","둘째")))
colSums(zz)
matrix(x, nrow=3, ncol=2, byrow=T, dimnames())
matrix(x, nrow=3, ncol=2, byrow=T, dimnames("첫째째"))
matrix(x, nrow=3, ncol=2, byrow=T, dimnames("첫째"))
dim(zz)
matrix_23 <- matrix(x, nrow=2, ncol=3)
matrix_23 <- rbind(c(1,2,3))
matrix_23 <- matrix(x, nrow=2, ncol=3)
matrix_33 <- rbind(c(1,2,3))
matrix_33
matrix_33 <- rbind(matrix_23, c(1,2,3))
matrix_33
matrix_24 <- cbind(matrix_23, c(1,2))
matrix_24
install.packages("readxl")
library(readxl)
matrix(1:20, 2)
matrix(1:19, 2)
matrix(10:20, 2)
matrix_24 <- cbind(matrix_23, c(1,2,3))
matrix_24
matrix_24 <- cbind(matrix_23, c(1,2,3))
matrix_24
matrix_25 <- cbind(matrix_23, c(1,2,3))
matrix_25
# 명명: rownames(), colnames()
rownames(matrix_23)
# 명명: rownames(), colnames()
rownames(matrix_23, c(11,22,33))
# 명명: rownames(), colnames()
rownames(matrix_23, c(11,22)
# 명명: rownames(), colnames()
rownames(matrix_23, c(11,22))
# 명명: rownames(), colnames()
rownames(matrix_23, c(11,22))
# 명명: rownames(), colnames()
rownames(matrix_23)
matrix_23[1,3]
matrix_23[2,]  #2행 전체 요소에 접근
matrix_23[,3]   #3열 전체 요소에 접근
matrix_23["row1",]  #1행 전체 요소에 접근
rownames <- c("row1", "row2", "row3", "row4")
colnames <- c("col1", "col2", "col3")
matrix_hasNames <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
matrix_hasNames["row1",]  #1행 전체 요소에 접근
matrix_hasNames[,"col3"]   #3열 전체 요소에 접근
result <- matrix_23 + 10
result
result <- matrix_23 + 10 * 2
result
x*c(1,2,3)
f <- function(x) {  #사용자 정의 함수
x*c(1,2,3)
}
result <- apply(matrix1, 1, f)
result <- apply(matrix_23, 1, f)
print(result)
result <- apply(matrix(1:9, ncol=3), 2, f)
print(result)
matrix_T <- t(matrix_23)
matrix_T
matrix_23
result <- matrix(1:30, 5,5)[-2]
result
result
result <- matrix(1:30, 5,5)
result
result <- matrix(1:30, 5,5)[1,3]
result
result
result <- matrix(1:30, 5,5)[,3]
result
result <- matrix(1:30, 5,5)[1,3,5]
result <- matrix(1:30, 5,5)[1,3]
result
result <- matrix(1:30, 5,5)[1,][3,][5,]
result <- matrix(1:30, 5,5)[-2]
result
result <- matrix(1:30, 5,5)[,-2]
result
result <- matrix(1:30, 5,5)[-c(2,4),]
result
result <- matrix(1:30, 5,5)[,-c(1,3)]
result
matrix_NotHasNames <- matrix(matrix_hasNames, dimnames())
matrix_NotHasNames <- matrix(matrix_hasNames,row(matrix_hasNames), col(matrix_hasNames) dimnames())
matrix_NotHasNames <- matrix(matrix_hasNames,row(matrix_hasNames), col(matrix_hasNames), dimnames())
matrix_NotHasNames <- matrix(matrix_hasNames,row(matrix_hasNames), col(matrix_hasNames), dimnames(NA))
matrix_NotHasNames <- matrix(matrix_hasNames,row(matrix_hasNames), col(matrix_hasNames),F, dimnames(NA))
matrix_NotHasNames
matrix_NotHasNames
matrix_NotHasNames <- matrix(matrix_hasNames,row(matrix_hasNames), col(matrix_hasNames),F, dimnames(NA))
matrix_NotHasNames
matrix_hasNames <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
matrix_NotHasNames <- matrix(matrix_hasNames,row(matrix_hasNames), col(matrix_hasNames),F, dimnames(NA))
matrix_NotHasNames
matrix_NotHasNames <- matrix(matrix_hasNames,row(matrix_hasNames), col(matrix_hasNames),F, dimnames(null))
matrix_NotHasNames <- matrix(matrix_hasNames,row(matrix_hasNames), col(matrix_hasNames),F, dimnames(NULL))
matrix_NotHasNames
matrix_hasNames <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
row(matrix_hasNames)
rows(matrix_hasNames)
rownums(matrix_hasNames)
nrow(matrix_hasNames)
matrix_NotHasNames <- matrix(matrix_hasNames,nrow(matrix_hasNames), ncol(matrix_hasNames),F, dimnames(NULL))
matrix_NotHasNames
rownames(matrix_NotHasNames)
# 컬럼, 로우 이름 제거
rownames <- c("row1", "row2", "row3", "row4")
colnames <- c("col1", "col2", "col3")
matrix_hasNames <- matrix(c(3:14), nrow = 4, byrow = TRUE, dimnames = list(rownames, colnames))
rownames(matrix_hasNames)
matrix_NotHasNames <- matrix(matrix_hasNames,nrow(matrix_hasNames), ncol(matrix_hasNames),F, dimnames(NULL))
rownames(matrix_NotHasNames)
matrix_ <- matrix(c(3:14), nrow = 4, byrow = TRUE)
rownames(matrix_)
matrix_S <- solve(matrix_23)
matrix_S <- solve(matrix33 <-rbind(matrix_23,c(1,2,3)))
matrix33 <-rbind(matrix_23,c(1,2,3))
matrix_S <- solve(matrix_33)
# 추가
dataframe_ex$tel <- 010-1111-2222
# 생성
ID <- c(1,2,3,4,5,6,7,8,9,10)
SEX <- c("F","M","F","M","F","M","F","M","F","M")
AGE <- c(50,40,28,50,27,23,56,47,20,38)
AREA <- c("서울","경기","제주","서울","서울","서울","서울","경기","서울","인천")
dataframe_ex <- data.frame(ID,SEX,AGE,AREA)
# 추가
dataframe_ex$tel <- 010-1111-2222
dataframe_ex
# 추가
dataframe_ex$tel <- "010-1111-2222"
dataframe_ex
ex_list$text <- 1
# 생성
ex_list <- list(c(1,2,3), "hello")
ex_list$text <- 1
ex_list
#문 > list 중 k3에 저장된 세번째 요소만 출력
list_data <- list(k1="RED",k2="Green",k3=c(21,32,11),k4=TRUE,k5=51.23,k6=119.1)
list_data[3]
list_data[3][3]
list_data[3]
list_data[3[3]]
list_data[3:3
list_data[3:3]
list_data[3:3]
list_data[3][:3]
source('C:/Users/student/Desktop/git_repository/R/src/Quiz_R.R', encoding = 'UTF-8', echo=TRUE)
list_data$k3[3]
vector_appendedV <- append(vector_int, 99, after=5)
vector_int <- c(-1,0,"4",5:9) # 문자열로 자동 형변환
vector_appendedV <- append(vector_int, 99, after=5)
vector_appendedV
vector_appendedV <- append(vector_int, 99, after=7)
vector_appendedV
vector_appendedV
vector_appendedV <- append(vector_int, 99, after=1)
vector_appendedV
print(list_data)
emp1 <- list(name='kim', address='seoul', age=30, hiredate=as.Date('2017/01/02'))
print(emp1)
str(emp1)
list_data <- list("Red", "Green", c(21,32,11), TRUE, 51.23, 119.1)
tracemem(emp1)
emp1$deptno <- 10 #리스트 객체에 새로운 data 추가
str(emp1)
tracemem(emp1)
문> exam1<- list(1,0, 2,0, -3, 4, -5, 6, 7, -8, 9, 10)
#문> exam1<- list(1,0, 2,0, -3, 4, -5, 6, 7, -8, 9, 10)
exam1<- list(1,0, 2,0, -3, 4, -5, 6, 7, -8, 9, 10)
#exam1로부터 음수를 제거한 리스트 출력
exam1
#exam1로부터 음수를 제거한 리스트 출력
result = ifelse(exam1 > 0, exam1, NULL )
#exam1로부터 음수를 제거한 리스트 출력
result = ifelse(exam1 > 0, exam1, "")
result
#exam1로부터 음수를 제거한 리스트 출력
result = ifelse(exam1 > 0, exam1, exam1 <-NULL)
#exam1로부터 음수를 제거한 리스트 출력
result = ifelse(exam1 > 0, exam1, exam1 <- NULL)
result
#문>
exam1<- list(1,0, 2,0, -3, 4, -5, 6, 7, -8, 9, 10)
#exam1로부터 음수를 제거한 리스트 출력
result = ifelse(exam1 > 0, exam1, exam1 <- NULL)
result
result = exam1[exam1 > 0]
result
#문>
exam1<- list(1,0, 2,0, -3, 4, -5, 6, 7, -8, 9, 10)
result = exam1[exam1 > 0]
result
#문>
exam1<- list(1,0, 2,0, -3, 4, -5, 6, 7, -8, 9, 10)
result = exam1[exam1 != 0]
result
result <- lapply(c(a,b),max)
result
str(result)
result <- lapply(c(a,b),max)
result
#lapply 함수
a <- list(c(1:5))
b <- list(6:10)
result <- lapply(c(a,b),max)
result
str(result)
#sapply 함수 ( vector 반환)
result <- sapply(c(a,b),max)
str(result)
multi_list
# 중첩 리스트
multi_list <- list(c1 = list(1,2,3),
c2 = list(10,20,30),
c3 = list(100,200,300))
multi_list
#다차원 리스트 -> 열단위 바인딩
do.call(cbind, multi_list)
# 생성
ID <- c(1,2,3,4,5,6,7,8,9,10)
SEX <- c("F","M","F","M","F","M","F","M","F","M")
AGE <- c(50,40,28,50,27,23,56,47,20,38)
AREA <- c("서울","경기","제주","서울","서울","서울","서울","경기","서울","인천")
dataframe_ex <- data.frame(ID = ID,SEX = SEX,AGE = AGE,AREA =AREA)
sales1 <- matrix(c(1,'Apple',500,5,
2, 'Peach',200,2,
3, 'Banana', 100,4,
4,'Grape',50,7), nrow=4, byrow=T)
str(sales1)
df1 <- data.frame(sales1)
str(df1)
df2 <- data.frame(sales1, stringsAsFactors = FALSE)
str(df2)
names(df2) <-c('NO','Fruit','Price','Qty')
# 내용 변환
# as.numeric()함수 사용
df2$Qty <- as.numeric(df2$Qty)
# 내용 변환
# as.numeric()함수 사용
df2$Qty <- as.numeric(df2$Qty)
df2$Price <- as.numeric(df2$Price)
str(df2)
#data.frame 요소에 접근 : 변수명$컬럼명 형식으로 요소 접근, 결과는 벡터로 반환
print(d1$name) #컬럼이름으로 data.frame 의 특정 컬럼 데이터 모두 access
#data.frame 요소에 접근 : 변수명$컬럼명 형식으로 요소 접근, 결과는 벡터로 반환
print(df2$name) #컬럼이름으로 data.frame 의 특정 컬럼 데이터 모두 access
#데이터프레임에 새로운 열 추가
dataframe_ex$work <- c(T,T,F,F,T,F,T,T,T,F)
str(dataframe_ex)
# subset(데이터프레임 객체, 조건) : 조건에 만족하는 행을 추출, 독립된 객체를 생성
# df1 데이터 프레임에서 수량이 5보다 큰 추출 출력
subset.df1 <- subset(df2, Qty>5)
subset.df1
str(subset.df1)
df2<-data.frame(x=c(1:5), y=seq(2, 10, 2), z=c('a', 'b', 'c', 'd', 'e'))
#summary()는 데이터프레임 객체의 데이터를 대상으로 최소값, 최대값, 중위수, 평균, 사분위수 값을 요약하여 반환
summary(df2)
# 문)df1 데이터 프레임에서 가격이 150보다 작은 데이터들 출력
result1 <- subset(df2, Price < 150)
# 문)df1 데이터 프레임에서 가격이 150보다 작은 데이터들 출력
result1 <- subset(df2, df2$Price < 150)
result1
View(df2)
df2 <- data.frame(sales1, stringsAsFactors = FALSE)  # 값을 Factor가 아닌 chr로 만든다.
names(df2) <-c('NO','Fruit','Price','Qty')
# 내용 변환
# as.numeric()함수 사용
df2$Qty <- as.numeric(df2$Qty)
df2$Price <- as.numeric(df2$Price)
#data.frame 요소에 접근 : 변수명$컬럼명 형식으로 요소 접근, 결과는 벡터로 반환
print(df2$name) #컬럼이름으로 data.frame 의 특정 컬럼 데이터 모두 access
str(df2)
#data.frame 요소에 접근 : 변수명$컬럼명 형식으로 요소 접근, 결과는 벡터로 반환
print(df2$name) #컬럼이름으로 data.frame 의 특정 컬럼 데이터 모두 access
#data.frame 요소에 접근 : 변수명$컬럼명 형식으로 요소 접근, 결과는 벡터로 반환
print(df2$names) #컬럼이름으로 data.frame 의 특정 컬럼 데이터 모두 access
#data.frame 요소에 접근 : 변수명$컬럼명 형식으로 요소 접근, 결과는 벡터로 반환
print(df2$Qty) #컬럼이름으로 data.frame 의 특정 컬럼 데이터 모두 access
# subset(데이터프레임 객체, 조건) : 조건에 만족하는 행을 추출, 독립된 객체를 생성
# df1 데이터 프레임에서 수량이 5보다 큰 추출 출력
subset.df1 <- subset(df2, Qty>5)
subset.df1
str(subset.df1)
# 문)df1 데이터 프레임에서 가격이 150보다 작은 데이터들 출력
result1 <- subset(df2, df2$Price < 150)
result1
# 문)df1 데이터 프레임에서 과일명이 바나나인것만  data.frame 구조로  출력
result2 <- subset(df2, df2$Fruit = "Banana")
# 문)df1 데이터 프레임에서 과일명이 바나나인것만  data.frame 구조로  출력
result2 <- subset(df2, df2$Fruit = 'Banana')
# 문)df1 데이터 프레임에서 과일명이 바나나인것만  data.frame 구조로  출력
result2 <- subset(df2, df2$Fruit == 'Banana')
result2
df2<-data.frame(x=c(1:5),
y=seq(2, 10, 2),
z=c('a', 'b', 'c', 'd', 'e'))
#문) df2 데이터프레임객체의 x컬럼의 값이 2이상이고  y컬럼은 6이하인 데이터들로 구성된 데이터프레임 부분집합 생성
result3 <- subset(subset(df2, df2$x >2)),df2$y < 6)
#문) df2 데이터프레임객체의 x컬럼의 값이 2이상이고  y컬럼은 6이하인 데이터들로 구성된 데이터프레임 부분집합 생성
result3 <- subset(subset(df2, df2$x >2),df2$y < 6)
result3
df2<-data.frame(x=c(1:5),
y=seq(2, 10, 2),
z=c('a', 'b', 'c', 'd', 'e'))
df2
result3
#문) df2 데이터프레임객체의 x컬럼의 값이 2이상이고  y컬럼은 6이하인 데이터들로 구성된 데이터프레임 부분집합 생성
result3 <- subset(subset(df2, df2$x >2), df2$y < 6)
result3
#문) df2 데이터프레임객체의 x컬럼의 값이 2이상이고  y컬럼은 6이하인 데이터들로 구성된 데이터프레임 부분집합 생성
# result3 <- subset(subset(df2, df2$x >2), df2$y < 6)
result3 <- subset(df2, df2$x >2)
result3
str(result3)
#문) df2 데이터프레임객체의 x컬럼의 값이 2이상이고  y컬럼은 6이하인 데이터들로 구성된 데이터프레임 부분집합 생성
# result3 <- subset(subset(df2, df2$x >2), df2$y < 6)
result3 <- subset(testDF <- subset(df2, df2$x >2), testDF$y < 6)
str(result3)
#문) df2 데이터프레임객체의 x컬럼의 값이 2이상이고  y컬럼은 6이하인 데이터들로 구성된 데이터프레임 부분집합 생성
# result3 <- subset(subset(df2, df2$x >2), df2$y < 6)
result3 <- subset(testDF <- subset(df2, df2$x >= 2), testDF$y <= 6)
str(result3)
#문> df2 데이터프레임객체의 x컬럼의 값이 2이상 또는  y컬럼은 6이하인 데이터들로 구성된 데이터프레임 부분집합 생성
testDF <- subset(df2, df2$x >= 2)
result4 <- subset(df2, df2$y <= 6) + testDF
emp.data <- data.frame(
emp_id = c (1:5),
emp_name = c("Rick","Dan","Michelle","Ryan","Gary"),
salary = c(623.3,515.2,611.0,729.0,843.25),
start_date = as.Date(c("2012-01-01", "2013-09-23", "2014-11-15", "2014-05-11",
"2015-03-27")),
stringsAsFactors = FALSE
)
print(emp.data)
str(emp.data)
#문> emp.data객체에서  3행, 5행의 2열과 4열의 데이터만 추출해서 출력
result5 = emp.data[c(3,5),c(2,4)]
result5
install.packages("readxl")
ininstall.packages("dplyr")
ininstall.packages("dplyr")
install.packages("dplyr")
library(readxl)
library(dqlyr)
library(dplyr)
dustdata <- read_excel("dustData.xlsx")
dustdata <- read_excel("./dustData.xlsx")
getwd()
dustdata <- read_excel("C:/Users/student/Desktop/git_repository/R/src/data/dustData.xlsx")
dustdata <- read_excel("C:/Users/student/Desktop/git_repository/R/data/dustData.xlsx")
View(dustdata)
str(dustdata)
dustdata_anal <- dustdata %>% filter(area %in% c("강남구","중구"))
View(dustdata_anal)
count(dustdata_anal, yyyymmdd) %>% arrange(desc(n))
count(dustdata_anal, area) %>% arrange(desc(n))
dust_anal_area_jg <- subset(dustdata_anal, area == "중구")
dust_anal_area_gn <- subset(dustdata_anal, area == "강남구")
install.packages("psych")
library(psych)
describe(dust_anal_area_gn$finedust)
describe(dust_anal_area_jg$finedust)
boxplot(dust_anal_area_gn, dust_anal_area_jg, main = "finedust_compare", xlab = "AREA",
names = c("강남구","중구"), ylab = "FINEDUST_PM", col = c("blue","green"))
boxplot(dust_anal_area_gn$finedust, dust_anal_area_jg$finedust, main = "finedust_compare", xlab = "AREA",
names = c("강남구","중구"), ylab = "FINEDUST_PM", col = c("blue","green"))
t.test(data = dustdata_anal, finedust ~ area, var.equal = T)
df4 <- data.frame(name = c(1,2,3,4))
df5 <- data.frame(name = c(3,4,5,6))
result <- merge(df4, df5)
result
result <- merge(df4, df5, all = T)
result
install.package(stringr)
library(stringr)
install.packages(stringr)
install.packages("stringr")
install.packages("stringr")
library(stringr)
help("stringr")
source('C:/Users/student/Desktop/git_repository/R/src/package_stringr.R', echo=TRUE)
#문> str1 <-"korea123456-1234567seoul" 에서 주민번호만 추출
result <- str_extract(str1, "[1-9]-[1-9]")
#문> str1 <-"korea123456-1234567seoul" 에서 주민번호만 추출
str1 <-"korea123456-1234567seoul"
result <- str_extract(str1, "[1-9]-[1-9]")
result
result <- str_extract(str1, "[%1-9]-[1-9%]")
result
result <- str_extract(str1, "[1-9]{6}-[1-9%]{7}")
result
#문> str2 <- "홍길동1357,이순신,유관순1012" 에서 7글자 이상 단어만 추출
str2 <- "홍길동1357,이순신,유관순1012"
result2 <- str_extract(str1, "[]{7}")
result2 <- str_extract(str1, "[가-힣1-9]{7}")
result2
result2 <- str_extract(str2, "[가-힣1-9]{7}")
result2
result2 <- str_extract(str2, "[가-힣1-9]{7}{2}")
result2
result2 <- str_extract(str2, "%[가-힣1-9]{7}%")
result2
result2 <- str_extract(str2, "[가-힣0-9]{7}")
result2
result2 <- str_extract(str2, "[가-힣0-9]{7}")
result2
#문> str2 <- "홍길동1357,이순신,유관순1012" 에서 7글자 이상 단어만 추출
str2 <- "홍길동1357","이순신","유관순1012"
#문> str2 <- "홍길동1357,이순신,유관순1012" 에서 7글자 이상 단어만 추출
str2 <- c("홍길동1357","이순신","유관순1012")
result2 <- str_extract(str2, "[가-힣0-9]{7}")
result2
result2 <- str_subset(str2, "[가-힣0-9]{7}")
result2
print(list.files())
print(list.files(recursive = T))
print(list.files(recursive = T))
print(list.files(all.files = T))
help(list.files)
data <- read.csv("C:/Users/student/Desktop/datafile-II/datafile-II/emp3.csv")
#문) emp3.csv파일의 데이터를 data.frame객체에 저장한 후에
#IT부서에서 급여가 600이상인 사원 추출
result <- subset(data, data$sal > 600 )
result
data
##문) emp3.csv파일의 데이터를 data.frame객체에 저장한 후에
#입사날자가 2014년 7월 01일 이후인 사원추출
str(data)
##문) emp3.csv파일의 데이터를 data.frame객체에 저장한 후에
#입사날자가 2014년 7월 01일 이후인 사원추출
as.Date(data$startdate)
##문) emp3.csv파일의 데이터를 data.frame객체에 저장한 후에
#입사날자가 2014년 7월 01일 이후인 사원추출
data$startdate <- as.Date(data$startdate)
data
str(data)
result2 <- subset(data, data$startdate > 2014-07-01)
result2
result2 <- subset(data, data$startdate > '2014-07-01')
result2
itPerson <- subset(data, data$dept == 'IT')
itPerson
write.csv(itPerson, "./itperson.csv", row.names = F)
loadTest <- read.csv("./itperson.csv",)
loadTest
#문) emp3.csv파일의 데이터를 data.frame객체에 저장한 후에
#IT부서에서 급여가 600이상인 사원 추출
result <- subset(data, data$sal > 600 && data$dept == "IT" )
result
#문) emp3.csv파일의 데이터를 data.frame객체에 저장한 후에
#IT부서에서 급여가 600이상인 사원 추출
result <- subset(data, data$sal > 600 & data$dept == "IT" )
result
###### I
install.packages("xlsx")   # xlsx 패키지 설치
install.packages("rJava")   # rJava 패키지 설치
library(xlsx)
library(rJava)
studentex <- read.xlsx(file.choose(),
sheetIndex=1, encoding="UTF-8")
studentex <- read.xlsx(file.choose(),
sheetIndex=1, encoding="UTF-8")
studentex <- read.xlsx(file.choose(),
sheetIndex=1, encoding="UTF-8")
studentex <- read.xlsx(file.choose(),
sheetIndex=1, encoding="UTF-8")
studentex <- read.xlsx(file.choose(),sheetIndex=1, encoding="UTF-8")
studentex
